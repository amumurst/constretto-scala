h1. Constretto Scala API

Constretto Scala API is a native Scala wrapper API over the Constretto configuration management framework for Java applications. 
By using this API you will be able to get a api that feels natural for Scala developers without loosing any of the features of Constretto.


h2. How to Install?

Constretto is deployed to a maven repository, so if you are using maven, you can simply add constretto-scala as dependencies in your pom:

<pre>
	<dependencies>
		...
		<dependency>
			<groupId>org.constretto</groupId>
			<artifactId>constretto-scala</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>
		...
	</dependencies>
	
	<repositories>
	    <repository>
	      <id>constretto.org</id>
	      <name>Constretto public maven repository</name>
	      <url>http://repo.constretto.org/content/repositories/releases</url>
	    </repository>
	</repositories>		
</pre>

If you are using SBT:

<pre>
	val constrettoRepo = "constretto repository" at "http://repo.constretto.org/content/repositories/snapshots"
	val constretto = "org.constretto" %% "constretto-scala" % "1.0-SNAPSHOT" 
</pre>


h2. How to use?



Constretto-Scala provides a simple API to configure and retreive values from Constretto. 

<pre>
	import org.constretto._
	import Constretto._
	
	val constretto = Constretto(List(properties("classpath:test.properties")),"myTag","myOtherTag")
	
	val aKeyThatMightExists:Option[String] = constretto.get[String]("myKey") 
	val aKeyThatMustExist:String = constretto[String]("myKey")  // throws exception on missing key	
</pre>

Constretto-Scala defines a ScalaValueConverter type class for converting values to specific types.
It comes bundled with predifined instances for all ValueConverter types defined by Constretto.

<pre>
	val existsInt:Option[Int] = constretto.get[Int]("int") // uses the intConverter instance to convert a string to an int
	val unknownType:Option[Bar] = constretto.get[Bar]("bar") // gives compile error since no ScalaValueConverter is defined for type Bar
</pre>

You can easily define your own ScalaConverter instances

<pre>
	object Foo {
	  implicit def fooConverter(implicit intC:ScalaValueConverter[Int]) = ScalaValueConverter[Foo](_.split(":") match {
	    case Array(first, second) => Foo(first, intC.convert(second))
	  })
	}
	case class Foo(a:String, b:Int)
	
	val foo:Option[Foo] = constretto.get[Foo]("foo") // compiles just fine and uses the fooConverter to convert strings to Foos	
</pre>


h2. How to report errors or request features?

Please use the JIRA issue tracker at "http://constretto.org":http://constretto.jira.com/browse/CS

h2. For further information and documentation

Constretto has several more nice features, and they are covered in the reference manual at the Constretto official website: "http://constretto.org":http://constretto.org
